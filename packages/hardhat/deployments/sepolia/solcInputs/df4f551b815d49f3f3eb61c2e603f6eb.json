{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Voting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract Voting {\n\n    struct Poll {\n        string name;\n        string prompt;\n        string[] options;\n        uint256 endTime;\n        address nftAddress; // Address of the NFT contract for eligibility\n        bool exists;\n        address creator;\n    }\n    \n    mapping(uint256 => Poll) public polls;\n    mapping(address => uint256[]) public pollsByCreator;\n    mapping(uint256 => mapping(address => bool)) public hasVoted; // Tracks if a user has voted in a poll\n    mapping(uint256 => mapping(uint256 => uint256)) public voteCounts;\n    \n    uint256 public pollCounter;\n    \n    event PollCreated(\n        uint256 indexed pollId, \n        address indexed creator, \n        string name, \n        string prompt,\n        uint256 endTime,\n        address nftAddress\n    );\n\n    event VoteCast(\n        uint256 pollId, \n        address voter, \n        uint256 optionIndex\n    );\n    \n    \n    function createPoll(\n        string memory _name,\n        string memory _prompt,\n        string[] memory _options,\n        uint256 _durationInMinutes,\n        address _nftAddress // Address of the NFT contract (can be zero address)\n    ) public returns (uint256) {\n        require(_options.length >= 2, \"At least 2 options required\");\n        \n        uint256 pollId = pollCounter++;\n        polls[pollId] = Poll({\n            name: _name,\n            prompt: _prompt,\n            options: _options,\n            endTime: block.timestamp + (_durationInMinutes * 1 minutes),\n            exists: true,\n            creator: msg.sender,\n            nftAddress: _nftAddress\n        });\n        pollsByCreator[msg.sender].push(pollId);\n        \n        emit PollCreated(pollId, msg.sender, _name, _prompt, block.timestamp + (_durationInMinutes * 1 minutes), _nftAddress);\n        return pollId;\n    }\n    \n    function castVote(uint256 pollId, uint256 optionIndex) public {\n        require(polls[pollId].exists, \"Poll does not exist\");\n        require(block.timestamp < polls[pollId].endTime, \"Poll has ended\");\n        require(optionIndex < polls[pollId].options.length, \"Invalid option\");\n        require(!hasVoted[pollId][msg.sender], \"User has already voted\");\n        \n        Poll memory poll = polls[pollId];\n\n        // Check NFT ownership if an NFT address is set\n        if (poll.nftAddress != address(0)) {\n            IERC721 nftContract = IERC721(poll.nftAddress);\n            require(\n                nftContract.balanceOf(msg.sender) > 0,\n                \"User does not own the required NFT\"\n            );\n        }\n\n        // Mark user as voted and count the vote\n        hasVoted[pollId][msg.sender] = true;\n        voteCounts[pollId][optionIndex]++;\n\n        emit VoteCast(pollId, msg.sender, optionIndex);\n    }\n    \n    // Existing function to get individual poll by ID\n    function getPollById(uint256 _pollId) public view returns (Poll memory) {\n        require(polls[_pollId].exists, \"Poll does not exist\");\n        return polls[_pollId];\n    }\n     // New function to get polls by creator\n    function getPollsByCreator(address _creator) public view returns (uint256[] memory) {\n        return pollsByCreator[_creator];\n    }\n    \n    function getVoteCounts(uint256 _pollId) public view returns (uint256[] memory) {\n        require(polls[_pollId].exists, \"Poll does not exist\");\n        uint256[] memory counts = new uint256[](polls[_pollId].options.length);\n        \n        for (uint256 i = 0; i < polls[_pollId].options.length; i++) {\n            counts[i] = voteCounts[_pollId][i];\n        }\n        \n        return counts;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}